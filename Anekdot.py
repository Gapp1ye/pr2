import requests
from bs4 import BeautifulSoup
import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import random
import sqlite3
from AnekdotDop import safe_exit

# –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('anekdots.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS anekdots (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        text TEXT NOT NULL,
        rating INTEGER
    )
''')
conn.commit()

def get_anekdots(url):
    headers = {
        "User-Agent": "Mozilla/5.0"
    }
    response = requests.get(url, headers=headers)

    if response.status_code != 200:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã. –ö–æ–¥: {response.status_code}")
        return []

    soup = BeautifulSoup(response.text, 'html.parser')
    jokes_html = soup.find_all("div", class_="text")
    jokes = [joke.get_text(strip=True) for joke in jokes_html]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    for joke in jokes:
        cursor.execute('''
            INSERT INTO anekdots (text, rating) VALUES (?, ?)
        ''', (joke, None))  # –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ = None
    conn.commit()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–Ω–µ–∫–¥–æ—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –æ—Ü–µ–Ω–∫–µ
    cursor.execute('''
        SELECT text, rating FROM anekdots ORDER BY rating DESC
    ''')
    sorted_jokes = cursor.fetchall()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
    sorted_jokes = [joke[0] for joke in sorted_jokes]
    
    random.shuffle(sorted_jokes)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
    return sorted_jokes

def show_next_joke():
    global index
    if index < len(anekdots):
        joke_text.config(state=tk.NORMAL)
        joke_text.delete("1.0", tk.END)
        joke_text.insert(tk.END, f"–ê–Ω–µ–∫–¥–æ—Ç {index + 1}:\n\n{anekdots[index]}")
        joke_text.config(state=tk.DISABLED)
        
        # –°–±—Ä–æ—Å–∏—Ç—å –∑–≤–µ–∑–¥–Ω—É—é –æ—Ü–µ–Ω–∫—É
        rating_label.config(text="–û—Ü–µ–Ω–∏—Ç–µ –∞–Ω–µ–∫–¥–æ—Ç: gfdfgdfgd")
        for btn in rating_buttons:
            btn.config(state=tk.NORMAL)

        index += 1
    else:
        messagebox.showinfo("–ö–æ–Ω–µ—Ü", "–ê–Ω–µ–∫–¥–æ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
        safe_exit(conn, root)

def rate_joke(rating):
    global index
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞
    cursor.execute('''
        UPDATE anekdots
        SET rating = ?
        WHERE text = ?
    ''', (rating, anekdots[index]))
    conn.commit()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É
    rating_label.config(text=f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} –∑–≤–µ–∑–¥(—ã)")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É
    for btn in rating_buttons:
        btn.config(state=tk.DISABLED)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–Ω–µ–∫–¥–æ—Ç—É –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    root.after(1000, show_next_joke)

def filter_by_rating(min_rating):
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ
    cursor.execute('''
        SELECT text, rating FROM anekdots WHERE rating >= ? ORDER BY rating DESC
    ''', (min_rating,))
    filtered_jokes = cursor.fetchall()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
    filtered_jokes = [joke[0] for joke in filtered_jokes]

    return filtered_jokes

def show_filtered_jokes(min_rating):
    global anekdots, index
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã –ø–æ –æ—Ü–µ–Ω–∫–µ
    anekdots = filter_by_rating(min_rating)
    index = 0  # –°–±—Ä–æ—Å–∏–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
    if anekdots:
        show_next_joke()
    else:
        joke_text.config(state=tk.NORMAL)
        joke_text.delete("1.0", tk.END)
        joke_text.insert(tk.END, "–ù–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —Å —Ç–∞–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π.")
        joke_text.config(state=tk.DISABLED)

# –ü–æ–ª—É—á–∞–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã
url = "https://www.anekdot.ru/release/anekdot/day/2025-04-23/"
anekdots = get_anekdots(url)
index = 0

if anekdots:
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
    root = tk.Tk()
    root.title("–ê–Ω–µ–∫–¥–æ—Ç—ã –¥–Ω—è —Å–º–µ–π—Å—è –µ—Å–ª–∏ —Ç—ã –Ω–µ –ø–∏–¥–æ—Ä")
    root.geometry("700x400")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
    frame = tk.Frame(root)
    frame.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    notebook = ttk.Notebook(root)
    notebook.pack(fill=tk.BOTH, expand=True)

    # –í–∫–ª–∞–¥–∫–∞ —Å –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏
    joke_tab = ttk.Frame(notebook)
    notebook.add(joke_tab, text="–í—Å–µ –∞–Ω–µ–∫–¥–æ—Ç—ã")

    # –í–∫–ª–∞–¥–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –æ—Ü–µ–Ω–∫–µ
    filter_tab = ttk.Frame(notebook)
    notebook.add(filter_tab, text="–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –æ—Ü–µ–Ω–∫–µ")

    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    joke_text = tk.Text(joke_tab, wrap=tk.WORD, font=("Arial", 12), bg="#fdfdfd", height=10)
    joke_text.pack(fill=tk.BOTH, expand=True)

    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –∞–Ω–µ–∫–¥–æ—Ç"
    next_button = tk.Button(joke_tab,
                            text="–°–ª–µ–¥—É—é—â–∏–π –∞–Ω–µ–∫–¥–æ—Ç üëâ",
                            command=show_next_joke,
                            font=("Arial", 12, "bold"),
                            bg="#dff0d8")
    next_button.pack(pady=10)

    # –ú–µ—Å—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating_label = tk.Label(joke_tab, text="–û—Ü–µ–Ω–∏—Ç–µ –∞–Ω–µ–∫–¥–æ—Ç:", font=("Arial", 12))
    rating_label.pack()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥)
    rating_buttons = []
    for i in range(1, 6):
        btn = tk.Button(joke_tab, text=f"{i}‚≠ê", font=("Arial", 12), command=lambda i=i: rate_joke(i))
        btn.pack(side=tk.LEFT, padx=5)
        rating_buttons.append(btn)

    # –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ü–µ–Ω–∫–µ
    filter_label = tk.Label(filter_tab, text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:", font=("Arial", 12))
    filter_label.pack(pady=10)

    # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    filter_buttons = []
    for i in range(1, 6):
        btn = tk.Button(filter_tab, text=f"–û—Ü–µ–Ω–∫–∞ {i}‚≠ê", font=("Arial", 12), command=lambda i=i: show_filtered_jokes(i))
        btn.pack(side=tk.LEFT, padx=5)
        filter_buttons.append(btn)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–µ–∫–¥–æ—Ç
    show_next_joke()

    # –ó–∞–ø—É—Å–∫ –æ–∫–Ω–∞
    root.mainloop()
else:
    print("–ê–Ω–µ–∫–¥–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

